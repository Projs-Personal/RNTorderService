spring.application.name=orderService
spring.datasource.url=jdbc:mysql://localhost:3316/order_service
spring.datasource.username=root
spring.datasource.password=mysql

#if done to ddl-auto=create -> create schema and destroy previous data & will also create all data tables automatically, we don't need it in prod
spring.jpa.hibernate.ddl-auto=none
server.port=8081

inventory.url=http://localhost:8082


#Resilinece4j Properties

#here, instead of config.default, we use INSTANCES.INVENTORY, because we'll use instance of inventory service
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#below code : how to determine the criteria on which the circuit breaker works : count no of requests (count_base), if certain limit raised, stop the req
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#10 req at a time
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
#if 5 calls fails, circuit breaker opens
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
#retry if the ext service is not responding for 2 s, if 3 attemps of retry -> open circuit breaker
resilience4j.retry.instances.inventory.wait-duration=2s
